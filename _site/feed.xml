<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Intuitive Counter: A Blog about Scala, Graphs, and Coding</title>
    <description>David Walend&#39;s blog about scala, graphs, and coding</description>
    <link>http://dwalend.github.io/blog/</link>
    <atom:link href="http://dwalend.github.io/blog/feed.xml" rel="self" type="application/rss+xml" />
    <pubDate>Mon, 22 Jun 2015 17:23:14 -0400</pubDate>
    <lastBuildDate>Mon, 22 Jun 2015 17:23:14 -0400</lastBuildDate>
    <generator>Jekyll v2.5.3</generator>
    
      <item>
        <title>Testing With TypeSafe Config</title>
        <description>&lt;h1&gt;Testing With TypeSafe Config&lt;/h1&gt;

&lt;p&gt;TL/DR - I found a workable compromise for testing with different configurations using &lt;a href=&quot;https://github.com/typesafehub/config&quot;&gt;typesafe config&lt;/a&gt; without starting a new JVM. See this &lt;a href=&quot;https://gist.github.com/dwalend/5a193daa24af8dbfbdc5&quot;&gt;gist&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Simple Structures&lt;/h2&gt;

&lt;p&gt;TypeSafe Config code loads the config from a hierarchy of sources - primarily files on the classpath and java.lang.System properties. I can access my system&amp;#39;s configuration from anywhere by calling &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Scala&quot; data-lang=&quot;Scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConfigFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbUrl&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;database.url&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I want to keep that simplicity. However, I also needed a good way to test with different configurations. My day-job project, &lt;a href=&quot;http://catalyst.harvard.edu/services/shrine/&quot;&gt;Shrine&lt;/a&gt;&amp;#39;s Data Steward Web App, has three different major configurations, maybe a dozen variations. &lt;/p&gt;

&lt;p&gt;Specifically, I want the code to use simple structures that draw their configuration from a typesafe &lt;a href=&quot;https://github.com/typesafehub/config/blob/master/config/src/main/java/com/typesafe/config/Config.java&quot;&gt;Config&lt;/a&gt; object. I want to be able to replicate the technique shamelessly without sharing code between subprojects. Further, I do not want that Config exposed in my system&amp;#39;s Scala API; I should be able to use Scala&amp;#39;s singleton &lt;a href=&quot;https://raseshmori.wordpress.com/2013/06/20/scala-part-4-classes-objects/&quot;&gt;&lt;code&gt;object&lt;/code&gt;s&lt;/a&gt; where I need singletons. At the day job, the configuration is unchanging once set - except for during tests. Having it front-and-center distracts from more important details. I should not have to couple my code via constructor parameters that make me wish for an aspect-oriented style. After all it&amp;#39;s just config.&lt;/p&gt;

&lt;h2&gt;Three Compromises&lt;/h2&gt;

&lt;p&gt;I thought of three options. None are perfect, but one is good enough.&lt;/p&gt;

&lt;h3&gt;Start a New Process&lt;/h3&gt;

&lt;p&gt;The most brute force approach is to use a different JVM process for testing each configuration. That&amp;#39;s how I&amp;#39;d have handled this back in the age of &lt;a href=&quot;http://zeroturnaround.com/rebellabs/java-build-tools-part-2-a-decision-makers-comparison-of-maven-gradle-and-ant-ivy/&quot;&gt;ant&lt;/a&gt;. However, Shrine uses maven. Creating a new JVM process for tests is out-of-model in Shrine and possibly in any maven project. I skipped from ant to &lt;a href=&quot;https://codeascraft.com/2014/09/30/building-a-better-build-our-transition-from-ant-to-sbt/&quot;&gt;sbt&lt;/a&gt;. During the age of maven I was at MathWorks where we used make. Maven feels as alien as a three-fingered glove. I don&amp;#39;t know a tasteful way to spin up several new processes for running tests in the same maven subproject.&lt;/p&gt;

&lt;h3&gt;Config Parameter Objects&lt;/h3&gt;

&lt;p&gt;The older code in Shrine uses config parameter objects, skipping typesafe config, to test parts of the system in isolation. A maven subproject uses typesafe config to drive various abstract-factory-pattern-inspired parts to construct parts for Shrine. Testing different configurations means constructing specialized configuration helpers instead of using a simple Config. The approach definitely solves the problem, but it adds a long, twisty maze between the config files where a value is defined and the code that actually uses it. Following that path adds about five minutes to each task involving a config key-value pair. The approach seems particularly invasive because singletons that could have been Scala &lt;code&gt;object&lt;/code&gt;s have to be constructed class instances. The existing pattern tightly couples the Shrine system around a single instance of a ShrineConfig class to keep the whole works from becoming a furball. Testing more than a single subsystem is very difficult. I found myself repeating my criticisms of Spring mixed with profane mutterings about &lt;a href=&quot;http://perl.plover.com/yak/design/samples/slide004.html&quot;&gt;GLOOP&lt;/a&gt;. Someday I want to clean up that part of the code, not add to the confusion.&lt;/p&gt;

&lt;h3&gt;A Little Custom Config Code&lt;/h3&gt;

&lt;p&gt;I decided to wrap typesafe config with just a little mutability and use &lt;a href=&quot;http://blog.jessitron.com/2012/07/choices-with-def-and-val-in-scala.html&quot;&gt;defs&lt;/a&gt; where I need configurable values. Using defs for configurable values forces them to be reevaluated each time the owning code accesses them; there will always be a little in-memory overhead. However, any part of the system can access the Config when needed, with a key&amp;#39;s name right next to the def that supplies the value. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Scala&quot; data-lang=&quot;Scala&quot;&gt;  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dbUrl&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleConfigSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;database.url&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;My first hack at the solution was to set and clean up system properties in a try/finally block, and use &lt;a href=&quot;https://github.com/typesafehub/config/blob/master/config/src/main/java/com/typesafe/config/ConfigFactory.java&quot;&gt;ConfigFactory&lt;/a&gt;&amp;#39;s resetCache method. The project is a web app showing a database; I can afford considerable overhead, but it just seemed sloppy. I won&amp;#39;t share some of the uglier code, but the progression to something clean went fine. The second hack was to put the try/finally into a higher-order function. The third step started to look less hacky. I replaced the cache flush and system properties with API to use &lt;a href=&quot;https://github.com/typesafehub/config#merging-config-trees&quot;&gt;Config&amp;#39;s withFallback()&lt;/a&gt; to get the default (cached and unchanging) Config. I put the changeable Config inside an &lt;a href=&quot;https://docs.oracle.com/javase/8/docs/api/java/util/concurrent/atomic/package-summary.html&quot;&gt;AtomicReference&lt;/a&gt; for minimal concurrent safety. Finally I dressed it up in a Scala-style &lt;a href=&quot;http://danielwestheide.com/blog/2012/12/26/the-neophytes-guide-to-scala-part-6-error-handling-with-try.html&quot;&gt;Try/Success/Failure&lt;/a&gt; . It&amp;#39;s not fool-proof, but should be fine for running one test at a time.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s what the code looks like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Scala&quot; data-lang=&quot;Scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;java.util.concurrent.atomic.AtomicReference&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.util.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Failure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;com.typesafe.config.&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConfigFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * Use to tweak a Config without clearing and reloading a new config (for testing).&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; *&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * @author dwalend&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AtomicConfigSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baseConfig&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atomicConfigRef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AtomicReference&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConfigFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;empty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * Get the atomic Config. Be sure to use defs for all &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * config values that might be changed.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atomicConfigRef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;withFallback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;baseConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * Use the config in a block of code with just one key/value replaced.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configForBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AnyRef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configPairs&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;configForBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configPairs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

  &lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   * Use the config in a block of code.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt;   */&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configForBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configPairs&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyRef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;scala.collection.JavaConverters.mapAsJavaMapConverter&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configPairsJava&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;java.util.Map&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;, &lt;span class=&quot;k&quot;&gt;_&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;&amp;lt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;AnyRef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configPairs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;asJava&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;blockConfig&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ConfigFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parseMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configPairsJava&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;originalConfig&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atomicConfigRef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getAndSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blockConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tryT&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Try&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atomicConfigRef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compareAndSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;blockConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;originalConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;tryT&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;match&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Success&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Expected config from ${blockConfig.origin()} to be from ${atomicConfigRef.get().origin()} instead.&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;case&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Failure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ok&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;
        &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IllegalStateException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;
          &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Throwable in block and expected config from ${blockConfig.origin()} to be from ${atomicConfigRef.get().origin()} instead.&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To use it, I create a Scala object to hold the config:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Scala&quot; data-lang=&quot;Scala&quot;&gt;&lt;span class=&quot;cm&quot;&gt;/**&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * A little object to let you reach your config from anywhere.&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * &lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; * @author dwalend&lt;/span&gt;
&lt;span class=&quot;cm&quot;&gt; */&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ExampleConfigSource&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;c1&quot;&gt;//load from application.conf and the usual typesafe config sources&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atomicConfig&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;AtomicConfigSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ConfigFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; 

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;Config&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;atomicConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configForBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;](&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;AnyRef&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;T&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;T&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; 
    &lt;span class=&quot;n&quot;&gt;atomicConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configForBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;origin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;block&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To change config in a test, wrap the test code in a configForBlock:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-Scala&quot; data-lang=&quot;Scala&quot;&gt;  &lt;span class=&quot;s&quot;&gt;&amp;quot;Steward&amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;should&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot; accept query requests with no topic in &amp;#39;just log and approve everything&amp;#39; mode &amp;quot;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;nc&quot;&gt;ExampleConfigSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configForBlock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;shrine.steward.createTopicsMode&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateTopicsMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TopicsIgnoredJustLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modeName&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CreateTopicsMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;TopicsIgnoredJustLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;
      &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;setProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;shrine.steward.createTopicsMode&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;modeName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;

      &lt;span class=&quot;nc&quot;&gt;Post&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;/qep/requestQueryAccess/user/${researcherUserName}&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InboundShrineQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;test query&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;Not even using a topic&amp;quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;addCredentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;qepCredentials&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&amp;gt;&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;route&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;~&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;check&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;assertResult&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
        <pubDate>Sun, 21 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://dwalend.github.io/blog/2015/06/21/Test-With-TypeSafeConfig/</link>
        <guid isPermaLink="true">http://dwalend.github.io/blog/2015/06/21/Test-With-TypeSafeConfig/</guid>
        
        
      </item>
    
      <item>
        <title>Escape to an Inner Object</title>
        <description>&lt;h2&gt;An Inner Trait Puzzle&lt;/h2&gt;

&lt;p&gt;I blundered into this strange puzzle with visibility, inner traits, and inner objects while putting together code to plug &lt;a href=&quot;https://github.com/dwalend/ScalaGraphMinimizer&quot;&gt;Semirings into Dijkstra&amp;#39;s algorithm&lt;/a&gt;. I&amp;#39;m not sure if the problem rates a bug report, or two, or a feature request, or is just something I don&amp;#39;t fully understand. I&amp;#39;d like to hear some advice before reporting (or not reporting) it.&lt;/p&gt;

&lt;p&gt;Find some code you can paste into the REPL in this &lt;a href=&quot;https://gist.github.com/dwalend/464a3c69c94165f02cd4&quot;&gt;gist&lt;/a&gt; to try different hacks.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s code that illustrates the dissonance fully:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;c1&quot;&gt;// A top-level trait defines a def&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TopTrait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topDef&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;String&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// A trait that has an inner trait that extends TopTrait&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeyondTrait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerThing&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;InnerTrait&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;trait&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InnerTrait&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TopTrait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerDef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;innerDef&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topDef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;topDef&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// A class that extends that more complex trait&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Beyond&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;extends&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BeyondTrait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

  &lt;span class=&quot;c1&quot;&gt;// An inner class that extends the InnerTrait, and a def that implements the more complex trait&amp;#39;s contract&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;override&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerThing&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InnerTrait&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beyondDef&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&amp;quot;innerThing from beyond&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;

&lt;span class=&quot;c1&quot;&gt;// A class that uses the class that implements the complex trait&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beyond&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Beyond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;

  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InnerObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// this won&amp;#39;t compile&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// &amp;quot;private value beyond escapes its defining scope as part of type OuterClass.this.beyond.InnerTrait&amp;quot;&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// the compiler won&amp;#39;t walk up the tree to find TopTrait&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;// and it won&amp;#39;t decide that it has access to the private beyond member&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerThing&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beyond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;innerThing&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;// and innerThing won&amp;#39;t be defined for these two vals&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topDefResult&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerThing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topDef&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerDefResult&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerThing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;innerDef&lt;/span&gt;

    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;comboResult&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;s&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&amp;quot;$innerDefResult and $topDefResult&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;It looked like it would work; even Intellij thought it would. However, the REPL tells me: &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;:20: error: private value beyond escapes its defining scope as part of &lt;span class=&quot;nb&quot;&gt;type &lt;/span&gt;OuterClass.this.beyond.InnerTrait
     val &lt;span class=&quot;nv&quot;&gt;innerThing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; beyond.innerThing
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#39;d blundered into this problem while refactoring some code to better fit the Law of Demeter and make it more readable. The original code just used the outer class&amp;#39; reference inside the inner object. It was cluttered, but it worked.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;beyond&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Beyond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;InnerObject&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;//this works as expected&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerDefResult&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beyond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;innerThing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;innerDef&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;//as does this&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;topDefResult&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beyond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;innerThing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;topDef&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I didn&amp;#39;t see why this should work but my first example did not. One of the reasons I like Scala is that I get to learn something new most days, so I decided to invest an hour and learn about what is going on.&lt;/p&gt;

&lt;p&gt;The error message says beyond is private. Making &lt;code&gt;beyond&lt;/code&gt; a public member appeases the compiler, but doesn&amp;#39;t provide much understanding:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;&lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;OuterClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beyond&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;Beyond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;
&lt;span class=&quot;o&quot;&gt;...&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Assigning a type of TopTrait to innerThing compiles past that, but the compiler can&amp;#39;t find the inner trait&amp;#39;s def. This seems correct to me and is the fix I settled for in the project&amp;#39;s code. However, it doesn&amp;#39;t explain what&amp;#39;s going on.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-scala&quot; data-lang=&quot;scala&quot;&gt;    &lt;span class=&quot;k&quot;&gt;val&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;innerThing&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;TopTrait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;beyond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;innerThing&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I think I&amp;#39;ve tilled up two problems. First, some things - types from the outer class&amp;#39; member variables - that should be visible inside the inner object are not. Second, the compiler is giving up inferring innerThing&amp;#39;s type instead of either using the publicly visible TypeTrait or shrugging and inferring that the type is Any.&lt;/p&gt;

&lt;p&gt;Or possibly the behavior is correct, my intuition is faulty, and there&amp;#39;s more for me to learn from this code. Thoughts?&lt;/p&gt;
</description>
        <pubDate>Mon, 08 Jun 2015 00:00:00 -0400</pubDate>
        <link>http://dwalend.github.io/blog/2015/06/08/escape-from-inner-trait/</link>
        <guid isPermaLink="true">http://dwalend.github.io/blog/2015/06/08/escape-from-inner-trait/</guid>
        
        
      </item>
    
      <item>
        <title>Between People at Enron</title>
        <description>&lt;p&gt;The tests in my &lt;a href=&quot;https://github.com/dwalend/ScalaGraphMinimizer&quot;&gt;graph algorithm library&lt;/a&gt; up to now have all used randomly connected graphs -- graphs with some random edges connecting nodes. To test Brandes&amp;#39; betweenness algorithm and (soon) the Louvain method I wanted some graph from nature. The Louvain method would be particularly bad at random graphs.&lt;/p&gt;

&lt;p&gt;At ActivateNetworks we did a lot of work with social graphs; I implemented Brandes&amp;#39; algorithm while there. Social graphs are less random because &lt;a href=&quot;http://en.wikipedia.org/wiki/Dunbar%27s_number&quot;&gt;people form communities of about 150 members, Dunbar&amp;#39;s number&lt;/a&gt;, and most people have active relationships with 12 people or less, mostly in that group of 150. I couldn&amp;#39;t share our customers&amp;#39; data, so I pulled in part of the &lt;a href=&quot;http://en.wikipedia.org/wiki/Enron_Corpus&quot;&gt;Enron email corpus&lt;/a&gt; to use for tests, which I turned into a &lt;a href=&quot;https://github.com/dwalend/EnronMetaData&quot;&gt;still-very-hacky github project&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;One thing that always bothered me at ActivateNetworks was our base-level assumption that any email at all meant a relationship might exist. I can swap the FewestNodes semiring in Brandes algorithm for something else, like the MostProbable semiring (with cheezy normalized probability weights from dividing the number of emails between two people by the maximum number in the month). If that&amp;#39;s radically different then I&amp;#39;ve discovered something worth bugging my old comrades about.&lt;/p&gt;

&lt;h2&gt;The Enron Email Corpus&lt;/h2&gt;

&lt;p&gt;The Justice Department seized Enron&amp;#39;s email logs from the company and went fishing for crooks. The &lt;a href=&quot;http://en.wikipedia.org/wiki/Enron_Corpus&quot;&gt;Enron email corpus&lt;/a&gt; may be the largest clob of email available for research. I&amp;#39;ll let others report &lt;a href=&quot;http://en.wikipedia.org/wiki/Enron_scandal&quot;&gt;the results&lt;/a&gt;; they found what they were looking for. &lt;a href=&quot;http://en.wikipedia.org/wiki/Andrew_McCallum&quot;&gt;Andrew McCallum&lt;/a&gt; purchased a copy of it and made it available to us all. You can download the whole works from a variety of sources, including the full text of the emails. Most of them are remarkably dull, but are great fodder for a talk on (our total lack of) electronic privacy.&lt;/p&gt;

&lt;p&gt;I downloaded them from &lt;a href=&quot;http://foreverdata.org/1009/&quot;&gt;Forever Data&lt;/a&gt;. (I could not make up that organization&amp;#39;s name for a sophomore short story class.) I use the email metadata only, which, for each email sent, shows who was emailing who. It&amp;#39;s much smaller, and in an easy-to-parse CSV format. I also only used the data for April 2000 for my tests. I don&amp;#39;t need more, and github gets cranky about &lt;a href=&quot;https://help.github.com/articles/what-is-my-disk-quota/&quot;&gt;files bigger than 100 MB&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Experience is What You Get When You Really Wanted Something Else&lt;/h2&gt;

&lt;p&gt;I&amp;#39;d thought parsing the CSVs would be a good way to get a little experience with &lt;a href=&quot;https://github.com/sirthias/parboiled2&quot;&gt;Parboiled&lt;/a&gt;. It didn&amp;#39;t go so well. The CSV example didn&amp;#39;t work out of the box, but &lt;a href=&quot;https://github.com/sirthias&quot;&gt;Mathias&lt;/a&gt; fixed it when I asked. He then added it as an official example. I had a companion object for my Transmission class, which &lt;a href=&quot;https://github.com/sirthias/parboiled2&quot;&gt;caused trouble&lt;/a&gt;; &amp;quot;Note that there is one quirk: For some reason this notation stops working if you explicitly define a companion object for your case class. You&amp;#39;ll have to write ~&amp;gt; (Person(_, _)) instead.&amp;quot; Having the companion object extend the right Tuple13 fixed it (and possibly problems with Slick).&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import implicit.expletives

object Transmission extends ((String,Int,Long,Email,Email,String,Boolean,Boolean,Boolean,String,String,String,String) =&amp;gt; Transmission)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I can&amp;#39;t recommend trying to maintain that extends clause in a project where anyone gets to add or remove columns, but at least the compiler will complain if you break it.&lt;/p&gt;

&lt;p&gt;My parser ran out of memory. &lt;a href=&quot;https://groups.google.com/forum/#!topic/parboiled-user/b7PH49fiFco&quot;&gt;Parboiled2 can&amp;#39;t stream&lt;/a&gt;.&lt;/p&gt;

&lt;h2&gt;Parsing Email Metadata&lt;/h2&gt;

&lt;p&gt;I gave up and wrote my own CSV parser. I was a bit &lt;a href=&quot;http://tburette.github.io/blog/2014/05/25/so-you-want-to-write-your-own-CSV-code/&quot;&gt;intimidated at first&lt;/a&gt;, but Scala kept it down to about &lt;a href=&quot;https://github.com/dwalend/EnronMetaData/blob/master/src/main/scala/net/walend/enron/CsvParser.scala&quot;&gt;25 lines of uninteresting imperative code&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;The more interesting, more idiomatic feature of the code is that parsing any line produces either a record of someone sending an email or a description of what problem the parser encountered -- Either[Problem,Transmission] in Scala. The bulk of the code is lines that dig out problems with the data.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  def create(fileName:String,lineNumber:Int,lineContents:Seq[String]):Either[Problem,Transmission] = {
    if (lineContents.size != 11) {
      if (lineContents.size &amp;lt; 11) Left(Problem(fileName, lineNumber,Category.tooFewColumns.name, s&amp;quot;(${lineContents.size}) in $lineContents&amp;quot;))
      else Left(Problem(fileName, lineNumber,Category.tooManyColumns.name, s&amp;quot;(${lineContents.size}) in $lineContents&amp;quot;))
    }
    else {
      val sender = Email(lineContents(1))
      val recipient = Email(lineContents(2))
      if(!sender.address.contains(&amp;#39;@&amp;#39;)) Left(Problem(fileName,lineNumber,Category.missingAt.name,s&amp;quot;sender $sender&amp;quot;))
      else if (!recipient.address.contains(&amp;#39;@&amp;#39;)) Left(Problem(fileName,lineNumber,Category.missingAt.name,s&amp;quot;recipient $recipient&amp;quot;))

      //Finally it&amp;#39;s OK to make a Transmission
      else  Right(Transmission(fileName = fileName,
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This approach works amazingly well. At the end of one pass it gives me a large sample of clean data plus a list of problems to fix, caveat problems I&amp;#39;ve never thought about that bring down the whole works. (I really need Bill Venners&amp;#39; &lt;a href=&quot;https://thenewcircle.com/s/post/1704/comparing_functional_error_handling_in_scalaz_and_scalactic?utm_campaign=twitter_channel&amp;amp;utm_source=twitter&amp;amp;utm_medium=social&amp;amp;utm_content=%22Comparing%20Functional%20Error%20Handling%20in%20Scalaz%20and%20Scalactic%2C%22%20%40bvenners%27s%20talk%20from%20%40nescalas%20is%20now%20live!&quot;&gt;Eastwood -- Good, Bad, or Ugly&lt;/a&gt; , late in the talk and in an unrecorded session the next day. We couldn&amp;#39;t figure out how to make Eastwood play nice with monadic idioms. However, Either will get us through the night.)&lt;/p&gt;

&lt;p&gt;The only really aggravating problem I encountered while reading in the data was &amp;quot;java.nio.charset.MalformedInputException: Input length = 1&amp;quot; , which is pretty unhelpful. Adding the iso-8859-1 encoding parameter to&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;Source.fromFile(file,&amp;quot;iso-8859-1&amp;quot;).getLines().toIterable.drop(1)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;fixed that. Thank you, Google.&lt;/p&gt;

&lt;h2&gt;Slick for Two Tables&lt;/h2&gt;

&lt;p&gt;After fiddling around a bit in the REPL I decided that I liked fiddling around with the data. The data was columnar, and not terribly interrelated. What I really wanted was a database.&lt;/p&gt;

&lt;p&gt;I hacked in some &lt;a href=&quot;http://slick.typesafe.com/&quot;&gt;Slick&lt;/a&gt; code, which worked exactly as advertised. I&amp;#39;d be highly critical of Slick if it had trouble with a schema of two tables. The remarkable thing about this Slick code is how it worked just like the examples.&lt;/p&gt;

&lt;h2&gt;Json, Because I Don&amp;#39;t Want a DB in my Graph Algorithms Test Code&lt;/h2&gt;

&lt;p&gt;Github is good at flat files. It&amp;#39;s not that hard to pull a database out of an archive, but I didn&amp;#39;t want to put that flavor of complexity into the graph algorithms project. I am willing to do something uninvasive and standard if it saves some weight of code. &lt;a href=&quot;https://github.com/scala/pickling&quot;&gt;Scala pickling&lt;/a&gt; is the future of Json in Scala (but not quite the present yet -- &lt;a href=&quot;https://github.com/spray/spray/issues/1002&quot;&gt;no spray.io support&lt;/a&gt; for example). It uses macros everywhere, so it is very efficient and doesn&amp;#39;t need help in the parsing. That&amp;#39;s the sort of hammer I want to swing.&lt;/p&gt;

&lt;p&gt;I was fiddling around in the REPL anyway, so I made my data file for the graph algorithm tests there.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;import scala.pickling._
import scala.pickling.json._
import net.walend.enron.EnronDatabase
import java.nio.file.{Paths, Files}
import java.nio.charset.StandardCharsets

val edges = EnronDatabase.extractTransmissionCounts
val edgeString:String = pickledEdges.value
JSONPickle(edgeString).unpickle[Seq[(String,String,Int)]]
Files.write(Paths.get(&amp;quot;results/LessEnron2000Apr.txt&amp;quot;), pickledEdges.toString.getBytes(StandardCharsets.UTF_8))
val fileString = scala.io.Source.fromFile(&amp;quot;results/LessEnron2000Apr.txt&amp;quot;).mkString
Files.write(Paths.get(&amp;quot;results/LessEnron2000Apr.txt&amp;quot;), pickledEdges.value.getBytes(StandardCharsets.UTF_8))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The only explicative was figuring out to use pickledEdges.value instead of pickledEdges.toString .&lt;/p&gt;

&lt;h2&gt;A Test of Betweenness on the Enron Data&lt;/h2&gt;

&lt;p&gt;Pulling the graph back out and running Brandes&amp;#39; betweenness was very tidy:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;&amp;quot;Betweenness for Enron data&amp;quot; should &amp;quot;be calculated&amp;quot; in {

  import scala.io.Source
  import scala.pickling._
  import scala.pickling.json._

  val fileContents = Source.fromURL(getClass.getResource(&amp;quot;/Enron2000Apr.json&amp;quot;)).mkString
  val edges = JSONPickle(fileContents).unpickle[Seq[(String,String,Int)]]

  val labelGraphAndBetweenness = Brandes.allLeastPathsAndBetweenness(edges,Seq.empty,FewestNodes,FewestNodes.convertEdgeToLabel)
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Results&lt;/h2&gt;

&lt;p&gt;In the REPL via sbt test:console, I ran&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;scala&amp;gt; import scala.io.Source
scala&amp;gt; import scala.pickling._
scala&amp;gt; import scala.pickling.json._
scala&amp;gt; import net.walend.graph.SomeGraph._
scala&amp;gt; import net.walend.graph.semiring.Brandes.BrandesSteps
scala&amp;gt; import net.walend.graph.semiring
scala&amp;gt; import net.walend.graph.semiring._
scala&amp;gt; val fileContents = Source.fromURL(getClass.getResource(&amp;quot;/Enron2000Apr.json&amp;quot;)).mkString
scala&amp;gt; val edges = JSONPickle(fileContents).unpickle[Seq[(String,String,Int)]]
scala&amp;gt; val labelGraphAndBetweenness = Brandes.allLeastPathsAndBetweenness(edges,Seq.empty,FewestNodes,FewestNodes.convertEdgeToLabel)
scala&amp;gt; val betweenness = labelGraphAndBetweenness._2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And finally&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;scala&amp;gt; betweenness.to[Seq].sortBy(x =&amp;gt; x._2)
java.lang.AssertionError: assertion failed: List(value _2$mcD$sp, value _2$mcD$sp, value _2$mcD$sp, value _2$mcD$sp, value _2$mcD$sp, value _2$mcD$sp, value _2$mcD$sp, value _2$mcD$sp, value _2$mcD$sp, value _2$mcD$sp)
    at scala.reflect.internal.Symbols$Symbol.suchThat(Symbols.scala:1916)
    at scala.tools.nsc.transform.SpecializeTypes$$anon$2.matchingSymbolInPrefix$1(SpecializeTypes.scala:1460)
    at scala.tools.nsc.transform.SpecializeTypes$$anon$2.transformSelect$1(SpecializeTypes.scala:1483)
 ...
    at sbt.TrapExit$App.run(TrapExit.scala:248)
    at java.lang.Thread.run(Thread.java:745)

 That entry seems to have slain the compiler.  Shall I replay
 your session? I can re-run each line except the last one.
 [y/n]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;How civilized, but not quite what I wanted for a finale. It&amp;#39;s only 1700 email addresses, so sortBy should be fine. A quick search lead to &lt;a href=&quot;https://issues.scala-lang.org/browse/SI-9099&quot;&gt;a bug report vs Scala 2.11.5&lt;/a&gt;, already fixed in 2.11.6. Switching to 2.11.4 got through the trouble.&lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a list of the addresses with the 10 highest betweenness values in April 2000 at Enron:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(steven.kean@enron.com,53260.58012691413)
(jeff.dasovich@enron.com,59156.98903661527)
(chris.germany@enron.com,61701.19086004503)
(carol.clair@enron.com,67655.27390774187)
(susan.scott@enron.com,76157.68561454736)
(sally.beck@enron.com,82040.94643046238)
(sara.shackleton@enron.com,89571.2341102196)
(vince.kaminski@enron.com,96123.70935699047)
(tana.jones@enron.com,110579.53312945696)
(mark.taylor@enron.com,111545.81230355639)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Switching to the MostProbable semiring was just a matter of mapping the edges to normalized edges and rerunning Brandes&amp;#39;. (The most frequented sender and recipient pair in the sample is vince.kaminski@enron.com writing to vince.kaminski@aol.com 274 times. I&amp;#39;m sure there&amp;#39;s an anecdote behind that.)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;val weightedEdges = edges.map(x =&amp;gt; (x._1,x._2,x._3.toDouble/274))
val normalizedGraphAndBetweenness = Brandes.allLeastPathsAndBetweenness(edges,Seq.empty,MostProbable,MostProbable.convertEdgeToLabel)
val normalizedBetweenness = normalizedGraphAndBetweenness._2
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The nodes with the 10 highest betweennesses using this probability model are not that different; debra.perlingiere@enron.com replaced jeff.dasovich@enron.com, and the other rankings moved around a bit. ActivateNetworks&amp;#39; assumption was fine.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;(chris.germany@enron.com,72725.80682360567)
(steven.kean@enron.com,81287.60122108378)
(debra.perlingiere@enron.com,89005.54636283437)
(susan.scott@enron.com,90021.18526949426)
(sally.beck@enron.com,115103.96001437954)
(vince.kaminski@enron.com,119572.49086838862)
(tana.jones@enron.com,159331.96521970455)
(mark.taylor@enron.com,179964.3443774904)
(carol.clair@enron.com,186060.8626406191)
(sara.shackleton@enron.com,206970.0875042239)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Betweenness did not do that good a job finding &lt;a href=&quot;http://en.wikipedia.org/wiki/Enron_scandal#Trials&quot;&gt;the executives accused in the scandal&lt;/a&gt;. Hopefully the Louvain method will do better.&lt;/p&gt;

&lt;p&gt;Probably the most interesting of these is Vincent Kaminski, Enron&amp;#39;s managing director for research. &lt;a href=&quot;http://www.nytimes.com/2006/01/29/business/businessspecial3/29profiles.html?pagewanted=all&quot;&gt;An NY Times article&lt;/a&gt; describes him as ethical, professional, and heroic, in contrast to the other power brokers around him. &amp;quot;As Enron was collapsing, Mr. Kaminski helped all 50 of his former research staff members find jobs elsewhere.&amp;quot;&lt;/p&gt;
</description>
        <pubDate>Sat, 28 Feb 2015 00:00:00 -0500</pubDate>
        <link>http://dwalend.github.io/blog/2015/02/28/Enron-Thing/</link>
        <guid isPermaLink="true">http://dwalend.github.io/blog/2015/02/28/Enron-Thing/</guid>
        
        
      </item>
    
      <item>
        <title>Generics and Semirings and Tilting at Windmills</title>
        <description>&lt;p&gt;One of the coolest things you can do with graphs is find the shortest paths between nodes. One of the coolest things you can do with those algorithms is change what &amp;quot;shortest&amp;quot; means using semirings. It&amp;#39;s so cool it makes group theory useful. Scala&amp;#39;s type system is rich enough to handle all that without hurting people&amp;#39;s eyes, so I did it in &lt;a href=&quot;https://github.com/dwalend/ScalaGraphMinimizer&quot;&gt;ScalaGraphMinimizer&lt;/a&gt;. &lt;/p&gt;

&lt;h2&gt;Type Families and Semirings&lt;/h2&gt;

&lt;p&gt;My biggest frustration with trying to define semirings in Java was that I had to carry everything around inside layered generic type specifications. There was no way to bound and encapsulate the layering, so the type specifications built up and became blinding eyesores. The advice I got was to not use Java&amp;#39;s type system that way. The only workable alternative was to cast as needed and hope it worked out at runtime. In contrast, Scala&amp;#39;s type system handles it gracefully. Scala lets me declare a namespace of types and use those declared types where needed. &lt;/p&gt;

&lt;p&gt;Here&amp;#39;s SemiringSupport, which is primarily about holding on to a set of related types.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;trait SemiringSupport[L,Key] {

  type Label = L

  def semiring:Semiring

  def heapOrdering:HeapOrdering[Key]

  def heapKeyForLabel:Label =&amp;gt; Key
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;SemiringSupport needs something to define the Labels the semiring operates on, a Semiring which brings the operators, and some bits to support heaps for Dijkstra&amp;#39;s algorithm. For the labels, I&amp;#39;m using a similar technique that I used for &lt;a href=&quot;http://dwalend.github.io/blog/2014/09/10/graphs-in-scala/&quot;&gt;the most general class of graphs&lt;/a&gt;, but this time I have a type parameter, L, that helps the compiler do some work for me. &lt;/p&gt;

&lt;p&gt;Here&amp;#39;s Semiring&amp;#39;s declaration, embedded inside the namespace. I think it is easy to map to the corresponding passage from Cormen’s &lt;em&gt;Algorithms&lt;/em&gt;, “A general framework for solving path problems in directed graphs,” 26.4 in my 1989 copy. (Cormen seems to have dropped it from later editions, but I found an OK description in &lt;a href=&quot;http://books.google.com/books?id=S-tXjl1hsUYC&amp;amp;lpg=PA54&amp;amp;dq=aho%20hopcroft%20ullman&amp;amp;pg=PA336#v=snippet&amp;amp;q=%22245.%20The%20algebraic%22&amp;amp;f=false&quot;&gt;Stoner&amp;#39;s &lt;em&gt;An Introduction to Data Structures and Algorithms&lt;/em&gt;&lt;/a&gt;.)&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  trait Semiring {

    /** identity */
    def I:Label

    /** annihilator */
    def O:Label

    def inDomain(label:Label):Boolean

    def summary(fromThroughTo:Label,current:Label):Label

    def extend(fromThrough:Label,throughTo:Label):Label

    def relax(fromThrough:Label,throughTo:Label,current:Label):Label = {
      summary(extend(fromThrough,throughTo),current)
    }   
  }
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With that in hand, I made a Semiring that counts nodes in a path. The Label is an Int -- the number of nodes in the path. The heapKey is that Label. Existing edges in the graph have a Label of 1 because you&amp;#39;d have to cross one edge to get from the source node to the target node. The identity, I, is 0 because you&amp;#39;d cross zero nodes, and the annihilator, O, is Int.MaxValue because it is an absurdly large number. The summary operator picks the least of two Labels -- the shortest of two paths. The extends method adds two Labels together -- adding one path to another. I did have to monkey around inside the extend method to avoid wrapping Ints while slinging around Int.MaxValues. Other than that, the code is simple.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;object FewestNodes extends SemiringSupport[Int,Int] {

  def semiring = FewestNodesSemiring

  def heapOrdering = FewestNodesHeapOrdering

  def heapKeyForLabel = {label:Label =&amp;gt; label}

  def convertEdgeToLabel[Node, EdgeLabel](start: Node, 
                                          end: Node, 
                                          label: EdgeLabel): FewestNodes.Label = 1

  object FewestNodesSemiring extends Semiring {

    def I = 0
    def O = Int.MaxValue

    def inDomain(label: Label): Boolean = {
      I &amp;lt;= label &amp;amp;&amp;amp; label &amp;lt; O
    }

    def summary(fromThroughToLabel:Label,
                currentLabel:Label):Label = {
      if(fromThroughToLabel &amp;lt; currentLabel) {
        fromThroughToLabel
      }
      else currentLabel
    }

    def extend(fromThroughLabel:Label,throughToLabel:Label):Label = {
      if ((fromThroughLabel == O) || (throughToLabel == O)) O
      else {
        val result = fromThroughLabel + throughToLabel
        if(result &amp;lt; 0) O //Wrapped
        else result
      }
    }
  }

  /**
   * A heap ordering that puts lower numbers on the top of the heap
   */
  object FewestNodesHeapOrdering extends HeapOrdering[Int] {
    //uninteresting HeapOrdering
  }

}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Algorithms in Scala Can Look Like Algorithms In Text Books Even With Complex Types&lt;/h2&gt;

&lt;p&gt;Even with the semiring mixed in, Dijkstra&amp;#39;s algorithm looks almost identical to the code from &lt;a href=&quot;http://en.wikipedia.org/wiki/Dijkstra&amp;#x27;s_algorithm#Using_a_priority_queue&quot;&gt;Wikipedia&lt;/a&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  def dijkstraSingleSource[Node,Label,Key](initialGraph:IndexedLabelDigraph[Node,Label],
                                           support:SemiringSupport[Label,Key])
                                          (source:initialGraph.InnerNodeType):Seq[(Node,Node,Label)] = {
    //Set up an array of Labels by node index
    val labels:ArrayBuffer[Label] = ArrayBuffer.fill(initialGraph.nodeCount)(support.semiring.O)

    //Set up the heap
    val heap:Heap[Key,initialGraph.InnerNodeType] = new FibonacciHeap(support.heapOrdering)

    val heapMembers:IndexedSeq[heap.HeapMember] = initialGraph.innerNodes.map(node =&amp;gt; heap.insert(support.heapKeyForLabel(support.semiring.O),node))

    //Raise sourceInnerNode&amp;#39;s to I
    labels(source.index) = support.semiring.I
    heapMembers(source.index).raiseKey(support.heapKeyForLabel(support.semiring.I))

    //While the heap is not empty
    while(!heap.isEmpty) {
      //take the top node
      val topNode = heap.takeTopValue()
      //For any node that is reachable from this node 
      for(successor &amp;lt;- topNode.successors) {
        val heapKey = heapMembers(successor._2.index)
        //if the node has not yet been visited (because its key is still in the heap)
        if(heapKey.isInHeap) {
          //Relax to get a new label
          val label = relaxSource(initialGraph,labels,support.semiring)(source,topNode,successor)
          labels(successor._2.index) = label
          heapKey.raiseKey(support.heapKeyForLabel(label))
        }
      }
    }

    //put everything back together
    labels.zipWithIndex.map(x =&amp;gt; (source.value,initialGraph.node(x._2),x._1)).filter(x =&amp;gt; x._3 != support.semiring.O)
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h2&gt;Specific Types (Semirings in this Case) Make the Algorithms More Powerful Without Risking Correctness&lt;/h2&gt;

&lt;p&gt;Creating new semirings, like this one for finding the most probable path, is easy and kinda fun:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;object MostProbable extends SemiringSupport[Double,Double] {

  def semiring = MostProbableSemiring

  def heapOrdering = MostProbableOrdering

  def heapKeyForLabel = {label:Label =&amp;gt; label}

  def convertEdgeToLabel[Node, Label](start: Node, end: Node, label: Label): MostProbable.Label = semiring.I

  object MostProbableSemiring extends Semiring {

    def I = 1.0
    def O = 0.0

    def inDomain(label: Label): Boolean = {
      I &amp;gt;= label &amp;amp;&amp;amp; label &amp;gt; O
    }

    def summary(fromThroughToLabel:Label,
                currentLabel:Label):Label = {
      if(fromThroughToLabel &amp;gt; currentLabel) {
        fromThroughToLabel
      }
      else currentLabel
    }

    def extend(fromThroughLabel:Label,throughToLabel:Label):Label = {
      if ((fromThroughLabel == O) || (throughToLabel == O)) O
      else {
        fromThroughLabel * throughToLabel
      }
    }
  }

  /**
   * A heap ordering that puts lower numbers on the top of the heap
   */
  object MostProbableOrdering extends HeapOrdering[Double] {
    //still not interesting 
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Best of all, Scala&amp;#39;s compiler is able to work out what the types are without my help&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;val labelEdges = Dijkstra.allPairsShortestPaths(testGraph.edges,
                                                testGraph.nodesSeq,
                                                FewestNodes,
                                                FewestNodes.convertEdgeToLabel)
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Compare that to this eye-burning call to Dijkstra&amp;#39;s algorithm in JDigraph:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;   Dijkstra&amp;lt;LeastPathLabel,
          IndexedMutableSimpleDigraph&amp;lt;TestBean&amp;gt;,
          NextStepDigraph&amp;lt;TestBean,LeastPathLabel,SimpleDigraph.SimpleEdge,IndexedMutableSimpleDigraph&amp;lt;TestBean&amp;gt;&amp;gt;,
          LeastPathComparator,
          LeastPathSemiring&amp;lt;TestBean,SimpleDigraph.SimpleEdge,IndexedMutableSimpleDigraph&amp;lt;TestBean&amp;gt;&amp;gt;&amp;gt; dijkstra = new Dijkstra&amp;lt;LeastPathLabel,
                                                                                                                  IndexedMutableSimpleDigraph&amp;lt;TestBean&amp;gt;,
                                                                                                                  NextStepDigraph&amp;lt;TestBean,LeastPathLabel,SimpleDigraph.SimpleEdge,IndexedMutableSimpleDigraph&amp;lt;TestBean&amp;gt;&amp;gt;,
                                                                                                                  LeastPathComparator,
                                                                                                                  LeastPathSemiring&amp;lt;TestBean,SimpleDigraph.SimpleEdge,IndexedMutableSimpleDigraph&amp;lt;TestBean&amp;gt;&amp;gt;&amp;gt;();
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;(Yes, Java&amp;#39;s new diamond operator might make this half the size. Too bad the code stopped compiling in JDK6.)&lt;/p&gt;

&lt;h2&gt;Maybe That Lance Wasn&amp;#39;t the Right Tool for Attacking this Windmill&lt;/h2&gt;

&lt;p&gt;I&amp;#39;m very happy with how the code came out this early in the project. I&amp;#39;ve been able to make something both explainable and powerful, and extend it to solve for betweenness (which deserves its own blog article). It took eight weeks of a few hours after work when family and chores left me a little time, maybe just 25 hours total. The final code looks just like the algorithms in the book, not an example of some vile boundary case. &lt;/p&gt;

&lt;p&gt;Download it and try it out. In sbt, it&amp;#39;s easy to type in a graph and try out different algorithms:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;libraryDependencies += &amp;quot;net.walend&amp;quot; %% &amp;quot;scalagraphminimizer&amp;quot; % &amp;quot;0.1.1&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dave&lt;/p&gt;
</description>
        <pubDate>Sun, 05 Oct 2014 00:00:00 -0400</pubDate>
        <link>http://dwalend.github.io/blog/2014/10/05/Semirings/</link>
        <guid isPermaLink="true">http://dwalend.github.io/blog/2014/10/05/Semirings/</guid>
        
        
      </item>
    
      <item>
        <title>Graphs, Now in Scala</title>
        <description>&lt;p&gt;Using my old JDigraph project, I did a lot of work with (unsurprisingly) directed graphs. I experimented with immutability before it was cool. I eventually hit the limit of Java&amp;#39;s type system and &lt;a href=&quot;https://weblogs.java.net/blog/dwalend/archive/2007/03/wild_winds_wres.html&quot;&gt;tried to punch through it.&lt;/a&gt; I&amp;#39;ve been able to get a lot further with hardly any grief in Scala. Scala&amp;#39;s type system has what I need and its collection library suits my taste. It just worked out of the box, was fun, and (I hope) is pretty easy to explain.&lt;/p&gt;

&lt;p&gt;In Scala also found I could put off defining the specifics of how a graph works until I was ready to define that kind of graph. Not having to predict the future perfectly from the outset is a huge win in object-oriented programming, and has really proven itself out over the last six months&amp;#39; hacking. That&amp;#39;s something I could never do in Java.&lt;/p&gt;

&lt;p&gt;A graph has a set of nodes and a set of edges. The edges define some kind of relationship between the nodes, but there are a lot of different possible rules for how those relationships work. &lt;a href=&quot;http://en.wikipedia.org/wiki/Graph_(mathematics)#Distinction_in_terms_of_the_main_definition&quot;&gt;Wikipedia lists many of them&lt;/a&gt;. &lt;/p&gt;

&lt;p&gt;First I&amp;#39;ll show the easy parts: I&amp;#39;ll get to edges in a minute. A graph has a set of nodes.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;trait Graph[Node] {

  def nodes:GenSet[Node]

  def nodeCount:Int
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Note that I&amp;#39;ve only put in a parameter for the Node&amp;#39;s type.  &lt;/p&gt;

&lt;p&gt;I can get cleaner API if I use an internal representation of the nodes, similar to Java&amp;#39;s &lt;a href=&quot;http://docs.oracle.com/javase/8/docs/api/java/util/Map.Entry.html&quot;&gt;Map.Entry&lt;/a&gt;. This internal representation at least needs access to the node put into the graph.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  /**
   * An internal representation of nodes within the graph
   */
  trait InnerNodeTrait {
    def value:Node
  }
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Here&amp;#39;s where things get interesting. I don&amp;#39;t know what the type of that internal node is going to be. However, for a given implementation of Graph all of those internal nodes will be InnerNodeType, and they are all at least InnerNodeTraits. &lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  /**
   * The type of InnerNodeTrait for this digraph representation
   */
  type InnerNodeType &amp;lt;: InnerNodeTrait
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#39;m not satisfied by the names InnerNodeTrait and InnerNodeType. Any suggestions for something better?&lt;/p&gt;

&lt;p&gt;I&amp;#39;ll want a way to return all the internal nodes, and get the internal node for an external node. I use the InnerNodeType in these definitions.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  /**
   * @return InnerNode representation of all of the nodes in the graph.
   */
  def innerNodes:Seq[InnerNodeType]

  /**
   * @param value a node that might be in this digraph
   * @return Some inner node if it exists in the digraph or None
   */
  def innerNode(value:Node):Option[InnerNodeType]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Defining edges is next. Someone using the API will pass in edges from the outside. Once the edges are in the Graph, it&amp;#39;s convenient to hand back an internal representation for edges. It will eventually carry around references to inner nodes (as InnerNodeTypes.) However, I don&amp;#39;t really know how the nodes will be related to each other yet. Therefore I declare both an OuterEdgeType and an InnerEdgeType. I don&amp;#39;t define anything about them except that they exist. They&amp;#39;ll have something to do with Node and InnerNodeType, but I can&amp;#39;t say what in a way that will be useful.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  type OuterEdgeType

  type InnerEdgeType
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Any help with naming? &amp;quot;type OuterEdgeType&amp;quot; is half a step from &amp;quot;object MyFirstScalaCode&amp;quot; .&lt;/p&gt;

&lt;p&gt;I know I&amp;#39;ll need to have access to the edges, and I have just enough type information to do it.&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  /**
   * @return A Traversable (usually something more specific) of the edges
   */
  def edges:GenTraversable[OuterEdgeType]

  /**
   * @return A Traversable (usually something more specific) of the edges as represented in the graph
   */
  def innerEdges:GenTraversable[InnerEdgeType]
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;I&amp;#39;ve managed to put off defining anything about edges except that edges exist, and they have an internal representation different from the external representation. The Graph class&amp;#39; API has committed to exactly as much as Wikipedia describes. Sub-traits can define edges for specialized graphs: Undirected graphs with Set2[Node] for edges. Directed graphs can have (Node,Node) tuple edges. Hypergraphs can use Sets, and directed hypergraphs can use a pair of Sets. Bipartite graphs can have edges just of nodes of different classes -- (Person,Job) for example. &lt;/p&gt;

&lt;p&gt;My favorite feature is that I don&amp;#39;t have to code up any of those variations until I&amp;#39;m ready to use them for something. I suspect (and hope) I can only find a place to use this construct (and the layered trait hierarchy that goes with it) once every few projects, but it should make a good capstone for a family of traits that builds from a very general concept. &lt;/p&gt;

&lt;p&gt;Here&amp;#39;s a labeled digraph example, where edges have labels:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;trait LabelDigraph[Node,Label] extends Digraph[Node] {

  type OuterEdgeType = (Node,Node,Label)

  type InnerEdgeType = (InnerNodeType,InnerNodeType,Label)

  /**
   * @return the label to return when no edge exists. If Label is an Option, this will be None.
   */
  def noEdgeExistsLabel:Label

  /**
   * @return the Edge between start and end or noEdgeExistsValue if no edge connects start to end
   */
  def label(start:InnerNodeType,end:InnerNodeType):Label
}
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;For the first release, I settled on two implementations of LabelDigraph: MatrixLabelDigraph which supports the Floyd-Warshall algorithm, and AdjacencyLabelDigraph which supports both Dijkstra&amp;#39;s algorithm and Brandes&amp;#39; betweenness algorithm. &lt;/p&gt;

&lt;p&gt;I tried to make constructing a graph very easy, by supplying companion objects with apply methods that have default arguments:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  def apply[Node,Label](edges:GenTraversable[(Node,Node,Label)] = Seq.empty,
                       nodes:GenSeq[Node] = Seq.empty,
                       noEdgeExistsValue:Label = null) = {
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So you can create a graph with a Vector of Tuple3s like this&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;  val yourGraph = AdjacencyLabelDigraph(edges = Vector((&amp;quot;A&amp;quot;,&amp;quot;B&amp;quot;,&amp;quot;ab&amp;quot;),(&amp;quot;B&amp;quot;,&amp;quot;C&amp;quot;,&amp;quot;bc&amp;quot;),(&amp;quot;C&amp;quot;,&amp;quot;A&amp;quot;,&amp;quot;ca&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;&lt;a href=&quot;https://github.com/dwalend/ScalaGraphMinimizer&quot;&gt;It&amp;#39;s all in an open source project on GitHub&lt;/a&gt;. Download it and try it out. In sbt console, it&amp;#39;s easy to just doodle around with graphs:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-text&quot; data-lang=&quot;text&quot;&gt;libraryDependencies += &amp;quot;net.walend&amp;quot; %% &amp;quot;scalagraphminimizer&amp;quot; % &amp;quot;0.1.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Dave&lt;/p&gt;
</description>
        <pubDate>Wed, 10 Sep 2014 00:00:00 -0400</pubDate>
        <link>http://dwalend.github.io/blog/2014/09/10/graphs-in-scala/</link>
        <guid isPermaLink="true">http://dwalend.github.io/blog/2014/09/10/graphs-in-scala/</guid>
        
        
      </item>
    
      <item>
        <title>Back From the Break</title>
        <description>&lt;p&gt;It&amp;#39;s been five years since my last blog post on &lt;a href=&quot;https://home.java.net/pub/au/95&quot;&gt;java.net&lt;/a&gt; -- amazingly still there. &lt;/p&gt;

&lt;p&gt;The world changed a bit. Oracle bought Sun. I figured out how to start Matlab clusters on AWS for MathWorks. My first daughter was born. I taught myself some Scala. I left MathWorks for ActivateNetworks -- a social network analysis start-up (with more favorable intellectual property rules). My second daughter was born and is just about to start talking. My first daughter started kindergarten. I started working almost exclusively in Scala. I returned to open source work a few months ago with the first release of &lt;a href=&quot;https://github.com/dwalend/ScalaGraphMinimizer&quot;&gt;ScalaGraphMinimizer&lt;/a&gt;, and I immediately started using it in my work to study how people communicate in their work. &lt;/p&gt;

&lt;p&gt;I miss the challenge of writing, so adding the blog back feels natural. I&amp;#39;ll mostly be describing what I find while I blunder through hobby projects. Many others are learning Scala, so hopefully what I have to say will be of some benefit to them (you?). The blog will be fairly technical, with lots of code examples. I&amp;#39;ll also be dropping in my opinion of what I think works well. I&amp;#39;ve been learning Scala largely in isolation, so I&amp;#39;ll occasionally post something alien-looking. Feel especially free to call that out in the comments.&lt;/p&gt;

&lt;p&gt;I&amp;#39;m also a proponent of explicit coding. I want the code to be so clear that people can look at it and either agree that it is correct or be able to easily spot places where the code&amp;#39;s behavior deviates from their expectations. Scala&amp;#39;s ability to blend object and functional programming fits that well. I can use objects to tell a story. Functional-style programming makes the whole story visible. &lt;/p&gt;

&lt;p&gt;Speakers at local MeetUps and conferences continue to surprise me with their praise of Scala. They talk about how writing Scala should be fun, and it usually is a blast. I&amp;#39;ve mostly enjoyed writing code over the years, but had never seen people talk openly about anything the way Scala&amp;#39;s proponents tell &lt;a href=&quot;https://www.youtube.com/watch?v=hzf3hTUKk8U&quot;&gt;how pleasant it is.&lt;/a&gt;. They even talk about &lt;a href=&quot;https://github.com/ktonga/reactive-turtle&quot;&gt;love and parenting&lt;/a&gt;. Further, the speakers at the Scala conferences and MeetUps are almost universally fit. Unlike so many in our profession, these people are jacked. They must have time to work out. I didn&amp;#39;t get it until I started doing almost all my work in Scala. I&amp;#39;ve gone from finishing just before deadlines to finishing with days or even whole weeks to spare. I use the time to polish my code, profile and speed it up, and to write extra tests. And then I get some exercise, horse around with my kids, work on open-source projects, and write a blog. &lt;/p&gt;
</description>
        <pubDate>Mon, 01 Sep 2014 00:00:00 -0400</pubDate>
        <link>http://dwalend.github.io/blog/2014/09/01/back-in/</link>
        <guid isPermaLink="true">http://dwalend.github.io/blog/2014/09/01/back-in/</guid>
        
        
      </item>
    
  </channel>
</rss>
